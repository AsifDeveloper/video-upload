/**
 * @internal
 */
export var ErrorType;
(function (ErrorType) {
    ErrorType[ErrorType["Restart"] = 0] = "Restart";
    ErrorType[ErrorType["Auth"] = 1] = "Auth";
    ErrorType[ErrorType["Retryable"] = 2] = "Retryable";
    ErrorType[ErrorType["FatalError"] = 3] = "FatalError";
})(ErrorType || (ErrorType = {}));
export class ErrorHandler {
    constructor() {
        this.min = 500;
        this.max = this.min * 120;
        this.factor = 2;
        this.attempts = 1;
        this.code = -1;
        this.delay = this.min;
    }
    kind(code) {
        if (code === this.code) {
            this.attempts++;
            if (this.attempts > ErrorHandler.maxAttempts) {
                return ErrorType.FatalError;
            }
        }
        else {
            this.reset();
        }
        this.code = code;
        if (ErrorHandler.authErrorCodes.includes(code)) {
            return ErrorType.Auth;
        }
        if (ErrorHandler.shouldRestartCodes.includes(code)) {
            return ErrorType.Restart;
        }
        if (code < 400 || code >= 500 || ErrorHandler.shouldRetryCodes.includes(code)) {
            return ErrorType.Retryable;
        }
        return ErrorType.FatalError;
    }
    wait() {
        return new Promise(resolve => {
            this.delay = Math.min(this.delay * this.factor, this.max);
            setTimeout(() => resolve(this.attempts), this.delay + Math.floor(Math.random() * this.min));
        });
    }
    reset() {
        this.delay = this.min;
        this.attempts = 1;
        this.code = -1;
    }
}
ErrorHandler.maxAttempts = 8;
ErrorHandler.shouldRestartCodes = [404, 410];
ErrorHandler.authErrorCodes = [401];
ErrorHandler.shouldRetryCodes = [423, 429];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3ItaGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC11cGxvYWR4LyIsInNvdXJjZXMiOlsibGliL2Vycm9yLWhhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0dBRUc7QUFDSCxNQUFNLENBQU4sSUFBWSxTQUtYO0FBTEQsV0FBWSxTQUFTO0lBQ25CLCtDQUFPLENBQUE7SUFDUCx5Q0FBSSxDQUFBO0lBQ0osbURBQVMsQ0FBQTtJQUNULHFEQUFVLENBQUE7QUFDWixDQUFDLEVBTFcsU0FBUyxLQUFULFNBQVMsUUFLcEI7QUFDRCxNQUFNLE9BQU8sWUFBWTtJQVl2QjtRQVBBLFFBQUcsR0FBRyxHQUFHLENBQUM7UUFDVixRQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDckIsV0FBTSxHQUFHLENBQUMsQ0FBQztRQUNYLGFBQVEsR0FBRyxDQUFDLENBQUM7UUFFTCxTQUFJLEdBQUksQ0FBQyxDQUFDLENBQUM7UUFHakIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO0lBQ3hCLENBQUM7SUFFRCxJQUFJLENBQUMsSUFBWTtRQUNmLElBQUksSUFBSSxLQUFLLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDdEIsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ2hCLElBQUksSUFBSSxDQUFDLFFBQVEsR0FBRyxZQUFZLENBQUMsV0FBVyxFQUFFO2dCQUM1QyxPQUFPLFNBQVMsQ0FBQyxVQUFVLENBQUM7YUFDN0I7U0FDRjthQUFNO1lBQ0wsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ2Q7UUFDRCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUVqQixJQUFJLFlBQVksQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzlDLE9BQU8sU0FBUyxDQUFDLElBQUksQ0FBQztTQUN2QjtRQUNELElBQUksWUFBWSxDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNsRCxPQUFPLFNBQVMsQ0FBQyxPQUFPLENBQUM7U0FDMUI7UUFDRCxJQUFJLElBQUksR0FBRyxHQUFHLElBQUksSUFBSSxJQUFJLEdBQUcsSUFBSSxZQUFZLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzdFLE9BQU8sU0FBUyxDQUFDLFNBQVMsQ0FBQztTQUM1QjtRQUNELE9BQU8sU0FBUyxDQUFDLFVBQVUsQ0FBQztJQUM5QixDQUFDO0lBRUQsSUFBSTtRQUNGLE9BQU8sSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDM0IsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDMUQsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUM5RixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxLQUFLO1FBQ0gsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDO1FBQ2xCLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDakIsQ0FBQzs7QUFqRE0sd0JBQVcsR0FBRyxDQUFDLENBQUM7QUFDaEIsK0JBQWtCLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDaEMsMkJBQWMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3ZCLDZCQUFnQixHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGVudW0gRXJyb3JUeXBlIHtcbiAgUmVzdGFydCxcbiAgQXV0aCxcbiAgUmV0cnlhYmxlLFxuICBGYXRhbEVycm9yXG59XG5leHBvcnQgY2xhc3MgRXJyb3JIYW5kbGVyIHtcbiAgc3RhdGljIG1heEF0dGVtcHRzID0gODtcbiAgc3RhdGljIHNob3VsZFJlc3RhcnRDb2RlcyA9IFs0MDQsIDQxMF07XG4gIHN0YXRpYyBhdXRoRXJyb3JDb2RlcyA9IFs0MDFdO1xuICBzdGF0aWMgc2hvdWxkUmV0cnlDb2RlcyA9IFs0MjMsIDQyOV07XG4gIG1pbiA9IDUwMDtcbiAgbWF4ID0gdGhpcy5taW4gKiAxMjA7XG4gIGZhY3RvciA9IDI7XG4gIGF0dGVtcHRzID0gMTtcbiAgcHJpdmF0ZSBkZWxheTogbnVtYmVyO1xuICBwcml2YXRlIGNvZGU/ID0gLTE7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5kZWxheSA9IHRoaXMubWluO1xuICB9XG5cbiAga2luZChjb2RlOiBudW1iZXIpOiBFcnJvclR5cGUge1xuICAgIGlmIChjb2RlID09PSB0aGlzLmNvZGUpIHtcbiAgICAgIHRoaXMuYXR0ZW1wdHMrKztcbiAgICAgIGlmICh0aGlzLmF0dGVtcHRzID4gRXJyb3JIYW5kbGVyLm1heEF0dGVtcHRzKSB7XG4gICAgICAgIHJldHVybiBFcnJvclR5cGUuRmF0YWxFcnJvcjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZXNldCgpO1xuICAgIH1cbiAgICB0aGlzLmNvZGUgPSBjb2RlO1xuXG4gICAgaWYgKEVycm9ySGFuZGxlci5hdXRoRXJyb3JDb2Rlcy5pbmNsdWRlcyhjb2RlKSkge1xuICAgICAgcmV0dXJuIEVycm9yVHlwZS5BdXRoO1xuICAgIH1cbiAgICBpZiAoRXJyb3JIYW5kbGVyLnNob3VsZFJlc3RhcnRDb2Rlcy5pbmNsdWRlcyhjb2RlKSkge1xuICAgICAgcmV0dXJuIEVycm9yVHlwZS5SZXN0YXJ0O1xuICAgIH1cbiAgICBpZiAoY29kZSA8IDQwMCB8fCBjb2RlID49IDUwMCB8fCBFcnJvckhhbmRsZXIuc2hvdWxkUmV0cnlDb2Rlcy5pbmNsdWRlcyhjb2RlKSkge1xuICAgICAgcmV0dXJuIEVycm9yVHlwZS5SZXRyeWFibGU7XG4gICAgfVxuICAgIHJldHVybiBFcnJvclR5cGUuRmF0YWxFcnJvcjtcbiAgfVxuXG4gIHdhaXQoKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICB0aGlzLmRlbGF5ID0gTWF0aC5taW4odGhpcy5kZWxheSAqIHRoaXMuZmFjdG9yLCB0aGlzLm1heCk7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHJlc29sdmUodGhpcy5hdHRlbXB0cyksIHRoaXMuZGVsYXkgKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiB0aGlzLm1pbikpO1xuICAgIH0pO1xuICB9XG5cbiAgcmVzZXQoKTogdm9pZCB7XG4gICAgdGhpcy5kZWxheSA9IHRoaXMubWluO1xuICAgIHRoaXMuYXR0ZW1wdHMgPSAxO1xuICAgIHRoaXMuY29kZSA9IC0xO1xuICB9XG59XG4iXX0=