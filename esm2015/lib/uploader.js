import * as tslib_1 from "tslib";
import { ErrorHandler, ErrorType } from './error-handler';
import { store } from './store';
import { createHash, DynamicChunk, isNumber, noop, unfunc } from './utils';
const actionToStatusMap = {
    pause: 'paused',
    upload: 'queue',
    cancel: 'cancelled',
    uploadAll: 'queue',
    pauseAll: 'paused',
    cancelAll: 'cancelled'
};
/**
 * Uploader Base Class
 */
export class Uploader {
    constructor(file, options) {
        this.file = file;
        this.options = options;
        /** Custom headers */
        this.headers = {};
        /** Upload endpoint */
        this.endpoint = '/upload';
        /** Retries handler */
        this.errorHandler = new ErrorHandler();
        /** byte offset within the whole file */
        this.offset = 0;
        /** Set HttpRequest responseType */
        this.responseType = '';
        this._url = '';
        this.cleanup = () => store.delete(this.uploadId);
        this.name = file.name;
        this.size = file.size;
        this.metadata = {
            name: file.name,
            mimeType: file.type || 'application/octet-stream',
            size: file.size,
            lastModified: file.lastModified
        };
        const print = JSON.stringify(Object.assign({}, this.metadata, { type: this.constructor.name, endpoint: options.endpoint }));
        this.uploadId = createHash(print).toString(16);
        this.stateChange = options.stateChange || noop;
        this.chunkSize = options.chunkSize || this.size;
        this.configure(options);
    }
    set status(s) {
        if (this._status === 'cancelled' || (this._status === 'complete' && s !== 'cancelled')) {
            return;
        }
        if (s !== this._status) {
            s === 'paused' && this.abort();
            this._status = s;
            ['cancelled', 'complete', 'error'].includes(s) && this.cleanup();
            s === 'cancelled' ? this.onCancel() : this.stateChange(this);
        }
    }
    get status() {
        return this._status;
    }
    get url() {
        return this._url || store.get(this.uploadId) || '';
    }
    set url(value) {
        this._url !== value && store.set(this.uploadId, value);
        this._url = value;
    }
    /**
     * Configure uploader
     */
    configure({ metadata = {}, headers = {}, token, endpoint, action }) {
        this.endpoint = endpoint || this.endpoint;
        this.token = token || this.token;
        this.metadata = Object.assign({}, this.metadata, unfunc(metadata, this.file));
        this.headers = Object.assign({}, this.headers, unfunc(headers, this.file));
        action && (this.status = actionToStatusMap[action]);
    }
    /**
     * Starts uploading
     */
    upload() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.status = 'uploading';
            try {
                yield this.getToken();
                this.offset = undefined;
                this.startTime = new Date().getTime();
                this.url = this.url || (yield this.getFileUrl());
                this.errorHandler.reset();
                this.start();
            }
            catch (_a) {
                if (this.errorHandler.kind(this.responseStatus) !== ErrorType.FatalError) {
                    this.status = 'retry';
                    yield this.errorHandler.wait();
                    this.status = 'queue';
                }
                else {
                    this.status = 'error';
                }
            }
        });
    }
    /**
     * Starts chunk upload
     */
    start() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            while (this.status === 'uploading' || this.status === 'retry') {
                if (this.offset !== this.size) {
                    try {
                        const offset = isNumber(this.offset)
                            ? yield this.sendFileContent()
                            : yield this.getOffset();
                        if (offset === this.offset) {
                            throw new Error('Content upload failed');
                        }
                        this.errorHandler.reset();
                        this.offset = offset;
                    }
                    catch (_a) {
                        const errType = this.errorHandler.kind(this.responseStatus);
                        if (this.responseStatus === 413) {
                            DynamicChunk.maxSize = this.chunkSize /= 2;
                        }
                        else if (errType === ErrorType.FatalError) {
                            this.status = 'error';
                        }
                        else if (errType === ErrorType.Restart) {
                            this.url = '';
                            this.status = 'queue';
                        }
                        else if (errType === ErrorType.Auth) {
                            yield this.getToken();
                        }
                        else {
                            this.status = 'retry';
                            yield this.errorHandler.wait();
                            this.offset = this.responseStatus >= 400 ? undefined : this.offset;
                            this.status = 'uploading';
                        }
                    }
                }
                else {
                    this.progress = 100;
                    this.remaining = 0;
                    this.status = 'complete';
                }
            }
        });
    }
    /**
     * Performs http requests
     */
    request({ method = 'GET', body = null, url, headers = {}, progress }) {
        return new Promise((resolve, reject) => {
            const xhr = (this._xhr = new XMLHttpRequest());
            xhr.open(method, url || this.url, true);
            if (body instanceof Blob || (body && progress)) {
                xhr.upload.onprogress = this.onProgress();
            }
            this.responseStatus = 0;
            this.response = undefined;
            this.responseType && (xhr.responseType = this.responseType);
            this.options.withCredentials && (xhr.withCredentials = true);
            const _headers = Object.assign({}, this.headers, headers);
            Object.keys(_headers).forEach(key => xhr.setRequestHeader(key, _headers[key]));
            xhr.onload = (evt) => {
                this.responseStatus = xhr.status;
                this.response = this.responseStatus !== 204 ? this.getResponseBody(xhr) : '';
                this.responseStatus >= 400 ? reject(evt) : resolve(evt);
            };
            xhr.onerror = reject;
            xhr.send(body);
        });
    }
    setAuth(token) {
        this.headers.Authorization = `Bearer ${token}`;
    }
    abort() {
        this.offset = undefined;
        this._xhr && this._xhr.abort();
    }
    onCancel() {
        this.abort();
        const stateChange = () => this.stateChange(this);
        if (this.url) {
            this.request({ method: 'DELETE' }).then(stateChange, stateChange);
        }
        else {
            stateChange();
        }
    }
    /**
     * Gets the value from the response
     */
    getValueFromResponse(key) {
        return this._xhr.getResponseHeader(key);
    }
    /**
     * Set auth token
     */
    getToken() {
        return Promise.resolve(unfunc(this.token || '', this.responseStatus)).then(token => token && this.setAuth(token));
    }
    getChunk() {
        this.chunkSize = isNumber(this.options.chunkSize) ? this.chunkSize : DynamicChunk.size;
        const start = this.offset || 0;
        const end = Math.min(start + this.chunkSize, this.size);
        const body = this.file.slice(this.offset, end);
        return { start, end, body };
    }
    getResponseBody(xhr) {
        let body = 'response' in xhr ? xhr.response : xhr.responseText;
        if (body && this.responseType === 'json' && typeof body === 'string') {
            try {
                body = JSON.parse(body);
            }
            catch (_a) { }
        }
        return body;
    }
    onProgress() {
        let throttle = 0;
        return ({ loaded }) => {
            const now = new Date().getTime();
            const uploaded = this.offset + loaded;
            const elapsedTime = (now - this.startTime) / 1000;
            this.speed = Math.round(uploaded / elapsedTime);
            DynamicChunk.scale(this.speed);
            if (!throttle) {
                throttle = window.setTimeout(() => (throttle = 0), 500);
                this.progress = +((uploaded / this.size) * 100).toFixed(2);
                this.remaining = Math.ceil((this.size - uploaded) / this.speed);
                this.stateChange(this);
            }
        };
    }
}
//# sourceMappingURL=data:application/json;base64,