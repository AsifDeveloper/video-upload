{"version":3,"file":"ngx-uploadx.js","sources":["ng://ngx-uploadx/lib/error-handler.ts","ng://ngx-uploadx/lib/store.ts","ng://ngx-uploadx/lib/utils.ts","ng://ngx-uploadx/lib/uploader.ts","ng://ngx-uploadx/lib/tus.ts","ng://ngx-uploadx/lib/uploaderx.ts","ng://ngx-uploadx/lib/uploadx.service.ts","ng://ngx-uploadx/lib/uploadx.directive.ts","ng://ngx-uploadx/lib/uploadx-drop.directive.ts","ng://ngx-uploadx/lib/uploadx.module.ts","ng://ngx-uploadx/ngx-uploadx.ts"],"sourcesContent":["/**\n * @internal\n */\nexport enum ErrorType {\n  Restart,\n  Auth,\n  Retryable,\n  FatalError\n}\nexport class ErrorHandler {\n  static maxAttempts = 8;\n  static shouldRestartCodes = [404, 410];\n  static authErrorCodes = [401];\n  static shouldRetryCodes = [423, 429];\n  min = 500;\n  max = this.min * 120;\n  factor = 2;\n  attempts = 1;\n  private delay: number;\n  private code? = -1;\n\n  constructor() {\n    this.delay = this.min;\n  }\n\n  kind(code: number): ErrorType {\n    if (code === this.code) {\n      this.attempts++;\n      if (this.attempts > ErrorHandler.maxAttempts) {\n        return ErrorType.FatalError;\n      }\n    } else {\n      this.reset();\n    }\n    this.code = code;\n\n    if (ErrorHandler.authErrorCodes.includes(code)) {\n      return ErrorType.Auth;\n    }\n    if (ErrorHandler.shouldRestartCodes.includes(code)) {\n      return ErrorType.Restart;\n    }\n    if (code < 400 || code >= 500 || ErrorHandler.shouldRetryCodes.includes(code)) {\n      return ErrorType.Retryable;\n    }\n    return ErrorType.FatalError;\n  }\n\n  wait(): Promise<number> {\n    return new Promise(resolve => {\n      this.delay = Math.min(this.delay * this.factor, this.max);\n      setTimeout(() => resolve(this.attempts), this.delay + Math.floor(Math.random() * this.min));\n    });\n  }\n\n  reset(): void {\n    this.delay = this.min;\n    this.attempts = 1;\n    this.code = -1;\n  }\n}\n","class Store {\n  constructor(public prefix = 'UPLOADX-V3.0-') {}\n  set(key: string, value: string) {\n    localStorage.setItem(this.prefix + key, value);\n  }\n  get(key: string): string | null | false {\n    return localStorage.getItem(this.prefix + key);\n  }\n  delete(key: string) {\n    localStorage.removeItem(this.prefix + key);\n  }\n}\nexport const store = 'localStorage' in window ? new Store() : new Map<string, string>();\n","// tslint:disable: no-bitwise\n\nfunction safeMatch(base: string, re: RegExp) {\n  return (base.match(re) || [])[0] || '';\n}\nexport function resolveUrl(url: string, base: string): string {\n  if (url.indexOf('https://') * url.indexOf('http://') === 0) {\n    return url;\n  }\n  if (url.indexOf('//') === 0) {\n    return safeMatch(base, /^(https?:)/) + url;\n  }\n  if (url.indexOf('/') === 0) {\n    return safeMatch(base, /^(?:https?:)?(?:\\/\\/)?([^\\/\\?]+)/) + url;\n  }\n  return safeMatch(base, /^(?:https?:)?(?:\\/\\/)?([^\\/\\?]+)?(.*\\/)/) + url;\n}\n\nexport function unfunc<T, V>(value: T | ((ref: V) => T), ref: V): T {\n  return value instanceof Function ? value(ref) : value;\n}\n\nexport const noop = () => {};\n\nexport const pick = <T, K extends keyof T>(obj: T, whitelist: K[]): Pick<T, K> => {\n  const result: any = {};\n  whitelist.forEach(key => (result[key] = obj[key]));\n  return result;\n};\n\nexport function isNumber(x: unknown): x is number {\n  return x === Number(x);\n}\n\nexport function isString(x: unknown): x is string {\n  return typeof x === 'string';\n}\n\n/**\n * 32-bit FNV-1a hash function\n */\nexport function createHash(str: string): number {\n  let hash = 2166136261;\n  const len = str.length;\n  for (let i = 0; i < len; i++) {\n    hash ^= str.charCodeAt(i);\n    hash += (hash << 1) + (hash << 4) + (hash << 7) + (hash << 8) + (hash << 24);\n  }\n  return hash >>> 0;\n}\nexport const b64 = {\n  encode: (str: string) =>\n    btoa(\n      encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, (match, p1) =>\n        String.fromCharCode(Number.parseInt(p1, 16))\n      )\n    ),\n  decode: (str: string) =>\n    decodeURIComponent(\n      atob(str)\n        .split('')\n        .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\n        .join('')\n    ),\n  serialize: (obj: Record<string, any>) => {\n    return Object.entries(obj)\n      .map(([key, value]) => `${key} ${b64.encode(String(value))}`)\n      .toString();\n  },\n  parse: (encoded: string) => {\n    const kvPairs = encoded.split(',').map(kv => kv.split(' '));\n    const decoded = Object.create(null);\n    for (const [key, value] of kvPairs) {\n      decoded[key] = b64.decode(value);\n    }\n    return decoded;\n  }\n};\n\n/**\n * Adaptive chunk size\n */\nexport class DynamicChunk {\n  /** Maximum chunk size in bytes */\n  static maxSize = Number.MAX_SAFE_INTEGER;\n  /** Minimum chunk size in bytes */\n  static minSize = 1024 * 256;\n  /** Initial chunk size in bytes */\n  static size = 4096 * 256;\n  static minChunkTime = 2;\n  static maxChunkTime = 8;\n\n  static scale(throughput: number) {\n    const elapsedTime = DynamicChunk.size / throughput;\n    if (elapsedTime < DynamicChunk.minChunkTime) {\n      DynamicChunk.size = Math.min(DynamicChunk.maxSize, DynamicChunk.size * 2);\n    }\n    if (elapsedTime > DynamicChunk.maxChunkTime) {\n      DynamicChunk.size = Math.max(DynamicChunk.minSize, DynamicChunk.size / 2);\n    }\n    return DynamicChunk.size;\n  }\n}\n","import { ErrorHandler, ErrorType } from './error-handler';\nimport {\n  UploadAction,\n  UploaderOptions,\n  UploadState,\n  UploadStatus,\n  UploadxControlEvent\n} from './interfaces';\nimport { store } from './store';\nimport { createHash, DynamicChunk, isNumber, noop, unfunc } from './utils';\n\nconst actionToStatusMap: { [K in UploadAction]: UploadStatus } = {\n  pause: 'paused',\n  upload: 'queue',\n  cancel: 'cancelled',\n  uploadAll: 'queue',\n  pauseAll: 'paused',\n  cancelAll: 'cancelled'\n};\ninterface RequestParams {\n  method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS';\n  body?: BodyInit | null;\n  url?: string;\n  headers?: Record<string, string>;\n  progress?: boolean;\n}\n\n/**\n * Uploader Base Class\n */\nexport abstract class Uploader implements UploadState {\n  set status(s: UploadStatus) {\n    if (this._status === 'cancelled' || (this._status === 'complete' && s !== 'cancelled')) {\n      return;\n    }\n    if (s !== this._status) {\n      s === 'paused' && this.abort();\n      this._status = s;\n      ['cancelled', 'complete', 'error'].includes(s) && this.cleanup();\n      s === 'cancelled' ? this.onCancel() : this.stateChange(this);\n    }\n  }\n  get status() {\n    return this._status;\n  }\n  get url(): string {\n    return this._url || store.get(this.uploadId) || '';\n  }\n  set url(value: string) {\n    this._url !== value && store.set(this.uploadId, value);\n    this._url = value;\n  }\n  readonly name: string;\n  readonly size: number;\n  readonly uploadId: string;\n  response: any;\n  responseStatus: number;\n  progress: number;\n  remaining: number;\n  speed: number;\n  /** Custom headers */\n  headers: Record<string, any> = {};\n  /** Metadata Object */\n  metadata: Record<string, any>;\n  /** Upload endpoint */\n  endpoint = '/upload';\n  /** Chunk size in bytes */\n  chunkSize: number;\n  /** Auth token/tokenGetter */\n  token: UploadxControlEvent['token'];\n  /** Retries handler */\n  protected errorHandler = new ErrorHandler();\n  /** Active HttpRequest */\n  protected _xhr: XMLHttpRequest;\n  /** byte offset within the whole file */\n  protected offset? = 0;\n  /** Set HttpRequest responseType */\n  protected responseType: XMLHttpRequestResponseType = '';\n  private _url = '';\n  private _status: UploadStatus;\n  private startTime: number;\n  private stateChange: (evt: UploadState) => void;\n\n  constructor(readonly file: File, readonly options: UploaderOptions) {\n    this.name = file.name;\n    this.size = file.size;\n    this.metadata = {\n      name: file.name,\n      mimeType: file.type || 'application/octet-stream',\n      size: file.size,\n      lastModified: file.lastModified\n    };\n    const print = JSON.stringify({\n      ...this.metadata,\n      type: this.constructor.name,\n      endpoint: options.endpoint\n    });\n    this.uploadId = createHash(print).toString(16);\n    this.stateChange = options.stateChange || noop;\n    this.chunkSize = options.chunkSize || this.size;\n    this.configure(options);\n  }\n\n  /**\n   * Configure uploader\n   */\n  configure({ metadata = {}, headers = {}, token, endpoint, action }: UploadxControlEvent): void {\n    this.endpoint = endpoint || this.endpoint;\n    this.token = token || this.token;\n    this.metadata = { ...this.metadata, ...unfunc(metadata, this.file) };\n    this.headers = { ...this.headers, ...unfunc(headers, this.file) };\n    action && (this.status = actionToStatusMap[action]);\n  }\n\n  /**\n   * Starts uploading\n   */\n  async upload(): Promise<void> {\n    this.status = 'uploading';\n    try {\n      await this.getToken();\n      this.offset = undefined;\n      this.startTime = new Date().getTime();\n      this.url = this.url || (await this.getFileUrl());\n      this.errorHandler.reset();\n      this.start();\n    } catch {\n      if (this.errorHandler.kind(this.responseStatus) !== ErrorType.FatalError) {\n        this.status = 'retry';\n        await this.errorHandler.wait();\n        this.status = 'queue';\n      } else {\n        this.status = 'error';\n      }\n    }\n  }\n\n  /**\n   * Starts chunk upload\n   */\n  async start() {\n    while (this.status === 'uploading' || this.status === 'retry') {\n      if (this.offset !== this.size) {\n        try {\n          const offset = isNumber(this.offset)\n            ? await this.sendFileContent()\n            : await this.getOffset();\n          if (offset === this.offset) {\n            throw new Error('Content upload failed');\n          }\n          this.errorHandler.reset();\n          this.offset = offset;\n        } catch {\n          const errType = this.errorHandler.kind(this.responseStatus);\n          if (this.responseStatus === 413) {\n            DynamicChunk.maxSize = this.chunkSize /= 2;\n          } else if (errType === ErrorType.FatalError) {\n            this.status = 'error';\n          } else if (errType === ErrorType.Restart) {\n            this.url = '';\n            this.status = 'queue';\n          } else if (errType === ErrorType.Auth) {\n            await this.getToken();\n          } else {\n            this.status = 'retry';\n            await this.errorHandler.wait();\n            this.offset = this.responseStatus >= 400 ? undefined : this.offset;\n            this.status = 'uploading';\n          }\n        }\n      } else {\n        this.progress = 100;\n        this.remaining = 0;\n        this.status = 'complete';\n      }\n    }\n  }\n\n  /**\n   * Performs http requests\n   */\n  request({\n    method = 'GET',\n    body = null,\n    url,\n    headers = {},\n    progress\n  }: RequestParams): Promise<ProgressEvent> {\n    return new Promise((resolve, reject) => {\n      const xhr = (this._xhr = new XMLHttpRequest());\n      xhr.open(method, url || this.url, true);\n      if (body instanceof Blob || (body && progress)) {\n        xhr.upload.onprogress = this.onProgress();\n      }\n      this.responseStatus = 0;\n      this.response = undefined;\n      this.responseType && (xhr.responseType = this.responseType);\n      this.options.withCredentials && (xhr.withCredentials = true);\n      const _headers = { ...this.headers, ...headers };\n      Object.keys(_headers).forEach(key => xhr.setRequestHeader(key, _headers[key]));\n      xhr.onload = (evt: ProgressEvent) => {\n        this.responseStatus = xhr.status;\n        this.response = this.responseStatus !== 204 ? this.getResponseBody(xhr) : '';\n        this.responseStatus >= 400 ? reject(evt) : resolve(evt);\n      };\n      xhr.onerror = reject;\n      xhr.send(body);\n    });\n  }\n\n  /**\n   * Get file URI\n   */\n  protected abstract getFileUrl(): Promise<string>;\n\n  /**\n   * Send file content and return an offset for the next request\n   */\n  protected abstract sendFileContent(): Promise<number | undefined>;\n\n  /**\n   * Get an offset for the next request\n   */\n  protected abstract getOffset(): Promise<number | undefined>;\n\n  protected setAuth(token: string) {\n    this.headers.Authorization = `Bearer ${token}`;\n  }\n\n  protected abort(): void {\n    this.offset = undefined;\n    this._xhr && this._xhr.abort();\n  }\n\n  protected onCancel(): void {\n    this.abort();\n    const stateChange = () => this.stateChange(this);\n    if (this.url) {\n      this.request({ method: 'DELETE' }).then(stateChange, stateChange);\n    } else {\n      stateChange();\n    }\n  }\n\n  /**\n   * Gets the value from the response\n   */\n  protected getValueFromResponse(key: string): string | null {\n    return this._xhr.getResponseHeader(key);\n  }\n\n  /**\n   * Set auth token\n   */\n  protected getToken(): Promise<any> {\n    return Promise.resolve(unfunc(this.token || '', this.responseStatus)).then(\n      token => token && this.setAuth(token)\n    );\n  }\n\n  protected getChunk() {\n    this.chunkSize = isNumber(this.options.chunkSize) ? this.chunkSize : DynamicChunk.size;\n    const start = this.offset || 0;\n    const end = Math.min(start + this.chunkSize, this.size);\n    const body = this.file.slice(this.offset, end);\n    return { start, end, body };\n  }\n  private cleanup = () => store.delete(this.uploadId);\n\n  private getResponseBody(xhr: XMLHttpRequest): any {\n    let body = 'response' in (xhr as any) ? xhr.response : xhr.responseText;\n    if (body && this.responseType === 'json' && typeof body === 'string') {\n      try {\n        body = JSON.parse(body);\n      } catch {}\n    }\n    return body;\n  }\n\n  private onProgress(): (evt: ProgressEvent) => void {\n    let throttle = 0;\n    return ({ loaded }: ProgressEvent) => {\n      const now = new Date().getTime();\n      const uploaded = (this.offset as number) + loaded;\n      const elapsedTime = (now - this.startTime) / 1000;\n      this.speed = Math.round(uploaded / elapsedTime);\n      DynamicChunk.scale(this.speed);\n      if (!throttle) {\n        throttle = window.setTimeout(() => (throttle = 0), 500);\n        this.progress = +((uploaded / this.size) * 100).toFixed(2);\n        this.remaining = Math.ceil((this.size - uploaded) / this.speed);\n        this.stateChange(this);\n      }\n    };\n  }\n}\n","import { Uploader } from './uploader';\nimport { b64, resolveUrl } from './utils';\n\n/**\n * Implements tus resumable upload protocol\n * @see\n * https://github.com/tus/tus-resumable-upload-protocol/blob/master/protocol.md\n */\nexport class Tus extends Uploader {\n  headers = { 'Tus-Resumable': '1.0.0' };\n\n  async getFileUrl(): Promise<string> {\n    const encodedMetaData = b64.serialize(this.metadata);\n    const headers = {\n      'Upload-Length': `${this.size}`,\n      'Upload-Metadata': `${encodedMetaData}`\n    };\n    await this.request({ method: 'POST', url: this.endpoint, headers });\n    const location = this.getValueFromResponse('location');\n    if (!location) {\n      throw new Error('Invalid or missing Location header');\n    }\n    this.offset = this.responseStatus === 201 ? 0 : undefined;\n    return resolveUrl(location, this.endpoint);\n  }\n\n  async sendFileContent(): Promise<number | undefined> {\n    const { body } = this.getChunk();\n    const headers = {\n      'Content-Type': 'application/offset+octet-stream',\n      'Upload-Offset': `${this.offset}`\n    };\n    await this.request({ method: 'PATCH', body, headers });\n    return this.getOffsetFromResponse();\n  }\n\n  async getOffset(): Promise<number | undefined> {\n    await this.request({ method: 'HEAD' });\n    return this.getOffsetFromResponse();\n  }\n\n  protected getOffsetFromResponse(): number | undefined {\n    const offsetStr = this.getValueFromResponse('Upload-Offset');\n    return offsetStr ? parseInt(offsetStr, 10) : undefined;\n  }\n}\n","import { Uploader } from './uploader';\nimport { resolveUrl } from './utils';\n\n/**\n * Implements XHR/CORS Resumable Upload\n * @see\n * https://developers.google.com/drive/api/v3/manage-uploads#resumable\n */\nexport class UploaderX extends Uploader {\n  responseType = 'json' as XMLHttpRequestResponseType;\n  async getFileUrl(): Promise<string> {\n    const headers = {\n      'Content-Type': 'application/json; charset=utf-8',\n      'X-Upload-Content-Length': this.size.toString(),\n      'X-Upload-Content-Type': this.file.type || 'application/octet-stream'\n    };\n    await this.request({\n      method: 'POST',\n      body: JSON.stringify(this.metadata),\n      url: this.endpoint,\n      headers\n    });\n    const location = this.getValueFromResponse('location');\n    if (!location) {\n      throw new Error('Invalid or missing Location header');\n    }\n    this.offset = this.responseStatus === 201 ? 0 : undefined;\n    return resolveUrl(location, this.endpoint);\n  }\n\n  async sendFileContent(): Promise<number | undefined> {\n    const { end, body } = this.getChunk();\n    const headers = {\n      'Content-Type': 'application/octet-stream',\n      'Content-Range': `bytes ${this.offset}-${end - 1}/${this.size}`\n    };\n    await this.request({ method: 'PUT', body, headers });\n    return this.getOffsetFromResponse();\n  }\n\n  async getOffset(): Promise<number | undefined> {\n    const headers = {\n      'Content-Type': 'application/octet-stream',\n      'Content-Range': `bytes */${this.size}`\n    };\n    await this.request({ method: 'PUT', headers });\n    return this.getOffsetFromResponse();\n  }\n\n  protected getOffsetFromResponse(): number | undefined {\n    if (this.responseStatus > 201) {\n      const range = this.getValueFromResponse('Range');\n      return range ? getRangeEnd(range) + 1 : undefined;\n    }\n    if (this.responseStatus <= 201) {\n      return this.size;\n    }\n  }\n}\n\nexport function getRangeEnd(range = ''): number {\n  const end = +range.split(/0-/)[1];\n  return end >= 0 ? end : -1;\n}\n","import { Injectable, NgZone, OnDestroy } from '@angular/core';\nimport { fromEvent, Observable, Subject, Subscription } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\nimport { UploaderOptions, UploadState, UploadxControlEvent, UploadxOptions } from './interfaces';\nimport { Uploader } from './uploader';\nimport { UploaderX } from './uploaderx';\nimport { pick } from './utils';\n\ninterface DefaultOptions {\n  endpoint: string;\n  autoUpload: boolean;\n  concurrency: number;\n  stateChange: (evt: Uploader) => void;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class UploadxService implements OnDestroy {\n  static stateKeys: Array<keyof UploadState> = [\n    'file',\n    'name',\n    'progress',\n    'remaining',\n    'response',\n    'responseStatus',\n    'size',\n    'speed',\n    'status',\n    'uploadId',\n    'url'\n  ];\n  /** Upload status events */\n  get events() {\n    return this.eventsStream.asObservable();\n  }\n  /** Upload Queue */\n  queue: Uploader[] = [];\n  options: UploadxOptions & DefaultOptions = {\n    endpoint: '/upload',\n    autoUpload: true,\n    concurrency: 2,\n    stateChange: (evt: Uploader) => {\n      setTimeout(() =>\n        this.ngZone.run(() => this.eventsStream.next(pick(evt, UploadxService.stateKeys)))\n      );\n    }\n  };\n\n  private readonly eventsStream: Subject<UploadState> = new Subject();\n  private subs: Subscription[] = [];\n  constructor(private ngZone: NgZone) {\n    this.subs.push(\n      fromEvent(window, 'online').subscribe(() => this.control({ action: 'upload' })),\n      fromEvent(window, 'offline').subscribe(() => this.control({ action: 'pause' })),\n      this.events.subscribe(({ status }) => {\n        if (status !== 'uploading' && status !== 'added') {\n          this.ngZone.runOutsideAngular(() => this.processQueue());\n        }\n      })\n    );\n  }\n\n  /**\n   * Initializes service\n   * @param options global module options\n   * @returns Observable that emits a new value on progress or status changes\n   */\n  init(options: UploadxOptions = {}): Observable<UploadState> {\n    Object.assign(this.options, options);\n    return this.events;\n  }\n\n  /**\n   * Initializes service\n   * @param options global module options\n   * @returns Observable that emits the current array of uploaders\n   */\n  connect(options?: UploadxOptions): Observable<Uploader[]> {\n    return this.init(options).pipe(\n      startWith(0),\n      map(() => this.queue)\n    );\n  }\n\n  /**\n   * Terminates all uploads and clears the queue\n   */\n  disconnect(): void {\n    this.queue.forEach(uploader => (uploader.status = 'paused'));\n    this.queue = [];\n  }\n\n  ngOnDestroy(): void {\n    this.disconnect();\n    this.subs.forEach(sub => sub.unsubscribe());\n  }\n  /**\n   * Create Uploader and add to the queue\n   */\n  handleFileList(fileList: FileList, options = {} as UploadxOptions): void {\n    const instanceOptions = { ...this.options, ...options };\n    this.options.concurrency = instanceOptions.concurrency;\n    Array.from(fileList).forEach(file => this.addUploaderInstance(file, instanceOptions));\n    this.autoUploadFiles();\n  }\n\n  /**\n   * Create Uploader for the file and add to the queue\n   */\n  handleFile(file: File, options = {} as UploadxOptions): void {\n    const instanceOptions = { ...this.options, ...options };\n    this.addUploaderInstance(file, instanceOptions);\n    this.autoUploadFiles();\n  }\n\n  /**\n   * Upload control\n   * @example\n   * // pause all\n   * this.uploadService.control({ action: 'pause' });\n   * // pause upload with uploadId\n   * this.uploadService.control({ action: 'pause', uploadId});\n   * // set token\n   * this.uploadService.control({ token: `TOKEN` });\n   */\n  control(evt: UploadxControlEvent): void {\n    const target = evt.uploadId\n      ? this.queue.filter(({ uploadId }) => uploadId === evt.uploadId)\n      : this.queue;\n    target.forEach(uploader => uploader.configure(evt));\n  }\n\n  /**\n   * Returns number of active uploads\n   */\n  runningProcess(): number {\n    return this.queue.filter(({ status }) => status === 'uploading' || status === 'retry').length;\n  }\n\n  private addUploaderInstance(file: File, options: UploadxOptions): void {\n    const uploader = new (options.uploaderClass || UploaderX)(file, options as UploaderOptions);\n    this.queue.push(uploader);\n    uploader.status = 'added';\n  }\n\n  private autoUploadFiles(): void {\n    if (this.options.autoUpload && window.navigator.onLine) {\n      this.queue\n        .filter(({ status }) => status === 'added')\n        .forEach(uploader => (uploader.status = 'queue'));\n    }\n  }\n\n  private processQueue(): void {\n    this.queue = this.queue.filter(({ status }) => status !== 'cancelled');\n\n    this.queue\n      .filter(({ status }) => status === 'queue')\n      .slice(0, Math.max(this.options.concurrency - this.runningProcess(), 0))\n      .forEach(uploader => uploader.upload());\n  }\n}\n","import {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  OnInit,\n  Output,\n  Renderer2\n} from '@angular/core';\nimport { UploadxControlEvent, UploadxOptions } from './interfaces';\nimport { UploadxService } from './uploadx.service';\n\n@Directive({ selector: '[uploadx]' })\nexport class UploadxDirective implements OnInit {\n  @Output()\n  uploadxState = new EventEmitter();\n  @Input()\n  uploadx: UploadxOptions;\n  @Input()\n  set uploadxAction(ctrlEvent: UploadxControlEvent) {\n    if (ctrlEvent && this.uploadService) {\n      this.uploadService.control(ctrlEvent);\n    }\n  }\n  constructor(\n    private elementRef: ElementRef,\n    private renderer: Renderer2,\n    private uploadService: UploadxService\n  ) {}\n\n  ngOnInit() {\n    const { multiple, allowedTypes } = this.uploadx;\n\n    multiple !== false && this.renderer.setAttribute(this.elementRef.nativeElement, 'multiple', '');\n\n    allowedTypes &&\n      this.renderer.setAttribute(this.elementRef.nativeElement, 'accept', allowedTypes);\n\n    this.uploadxState.emit(this.uploadService.events);\n  }\n\n  @HostListener('change', ['$event.target.files'])\n  fileListener(files: FileList) {\n    if (files && files.item(0)) {\n      this.uploadService.handleFileList(files, this.uploadx);\n    }\n  }\n}\n","import { ContentChild, Directive, HostBinding, HostListener } from '@angular/core';\nimport { UploadxDirective } from './uploadx.directive';\nimport { UploadxService } from './uploadx.service';\n\n@Directive({ selector: '[uploadxDrop]' })\nexport class UploadxDropDirective {\n  @HostBinding('class.uploadx-drop-active')\n  active = false;\n\n  @ContentChild(UploadxDirective)\n  fileInput: UploadxDirective;\n  constructor(private uploadService: UploadxService) {}\n\n  @HostListener('drop', ['$event'])\n  dropHandler(event: DragEvent) {\n    if (event.dataTransfer && event.dataTransfer.files) {\n      event.stopPropagation();\n      event.preventDefault();\n      this.active = false;\n      if (event.dataTransfer.files.item(0)) {\n        this.uploadService.handleFileList(event.dataTransfer.files, this.fileInput.uploadx);\n      }\n    }\n  }\n\n  @HostListener('dragover', ['$event'])\n  onDragOver(event: DragEvent) {\n    if (event.dataTransfer && event.dataTransfer.files) {\n      event.dataTransfer.dropEffect = 'copy';\n      event.stopPropagation();\n      event.preventDefault();\n      this.active = true;\n    }\n  }\n\n  @HostListener('dragleave', ['$event'])\n  onDragLeave(event: DragEvent) {\n    this.active = false;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { UploadxDropDirective } from './uploadx-drop.directive';\nimport { UploadxDirective } from './uploadx.directive';\n\n@NgModule({\n  declarations: [UploadxDirective, UploadxDropDirective],\n  exports: [UploadxDirective, UploadxDropDirective]\n})\nexport class UploadxModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["tslib_1.__values","tslib_1.__extends","tslib_1.__decorate"],"mappings":"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"}