/**
 * @internal
 */
export var ErrorType;
(function (ErrorType) {
    ErrorType[ErrorType["Restart"] = 0] = "Restart";
    ErrorType[ErrorType["Auth"] = 1] = "Auth";
    ErrorType[ErrorType["Retryable"] = 2] = "Retryable";
    ErrorType[ErrorType["FatalError"] = 3] = "FatalError";
})(ErrorType || (ErrorType = {}));
var ErrorHandler = /** @class */ (function () {
    function ErrorHandler() {
        this.min = 500;
        this.max = this.min * 120;
        this.factor = 2;
        this.attempts = 1;
        this.code = -1;
        this.delay = this.min;
    }
    ErrorHandler.prototype.kind = function (code) {
        if (code === this.code) {
            this.attempts++;
            if (this.attempts > ErrorHandler.maxAttempts) {
                return ErrorType.FatalError;
            }
        }
        else {
            this.reset();
        }
        this.code = code;
        if (ErrorHandler.authErrorCodes.includes(code)) {
            return ErrorType.Auth;
        }
        if (ErrorHandler.shouldRestartCodes.includes(code)) {
            return ErrorType.Restart;
        }
        if (code < 400 || code >= 500 || ErrorHandler.shouldRetryCodes.includes(code)) {
            return ErrorType.Retryable;
        }
        return ErrorType.FatalError;
    };
    ErrorHandler.prototype.wait = function () {
        var _this = this;
        return new Promise(function (resolve) {
            _this.delay = Math.min(_this.delay * _this.factor, _this.max);
            setTimeout(function () { return resolve(_this.attempts); }, _this.delay + Math.floor(Math.random() * _this.min));
        });
    };
    ErrorHandler.prototype.reset = function () {
        this.delay = this.min;
        this.attempts = 1;
        this.code = -1;
    };
    ErrorHandler.maxAttempts = 8;
    ErrorHandler.shouldRestartCodes = [404, 410];
    ErrorHandler.authErrorCodes = [401];
    ErrorHandler.shouldRetryCodes = [423, 429];
    return ErrorHandler;
}());
export { ErrorHandler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3ItaGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC11cGxvYWR4LyIsInNvdXJjZXMiOlsibGliL2Vycm9yLWhhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0dBRUc7QUFDSCxNQUFNLENBQU4sSUFBWSxTQUtYO0FBTEQsV0FBWSxTQUFTO0lBQ25CLCtDQUFPLENBQUE7SUFDUCx5Q0FBSSxDQUFBO0lBQ0osbURBQVMsQ0FBQTtJQUNULHFEQUFVLENBQUE7QUFDWixDQUFDLEVBTFcsU0FBUyxLQUFULFNBQVMsUUFLcEI7QUFDRDtJQVlFO1FBUEEsUUFBRyxHQUFHLEdBQUcsQ0FBQztRQUNWLFFBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNyQixXQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsYUFBUSxHQUFHLENBQUMsQ0FBQztRQUVMLFNBQUksR0FBSSxDQUFDLENBQUMsQ0FBQztRQUdqQixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7SUFDeEIsQ0FBQztJQUVELDJCQUFJLEdBQUosVUFBSyxJQUFZO1FBQ2YsSUFBSSxJQUFJLEtBQUssSUFBSSxDQUFDLElBQUksRUFBRTtZQUN0QixJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDaEIsSUFBSSxJQUFJLENBQUMsUUFBUSxHQUFHLFlBQVksQ0FBQyxXQUFXLEVBQUU7Z0JBQzVDLE9BQU8sU0FBUyxDQUFDLFVBQVUsQ0FBQzthQUM3QjtTQUNGO2FBQU07WUFDTCxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDZDtRQUNELElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBRWpCLElBQUksWUFBWSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDOUMsT0FBTyxTQUFTLENBQUMsSUFBSSxDQUFDO1NBQ3ZCO1FBQ0QsSUFBSSxZQUFZLENBQUMsa0JBQWtCLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ2xELE9BQU8sU0FBUyxDQUFDLE9BQU8sQ0FBQztTQUMxQjtRQUNELElBQUksSUFBSSxHQUFHLEdBQUcsSUFBSSxJQUFJLElBQUksR0FBRyxJQUFJLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDN0UsT0FBTyxTQUFTLENBQUMsU0FBUyxDQUFDO1NBQzVCO1FBQ0QsT0FBTyxTQUFTLENBQUMsVUFBVSxDQUFDO0lBQzlCLENBQUM7SUFFRCwyQkFBSSxHQUFKO1FBQUEsaUJBS0M7UUFKQyxPQUFPLElBQUksT0FBTyxDQUFDLFVBQUEsT0FBTztZQUN4QixLQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSSxDQUFDLEtBQUssR0FBRyxLQUFJLENBQUMsTUFBTSxFQUFFLEtBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUMxRCxVQUFVLENBQUMsY0FBTSxPQUFBLE9BQU8sQ0FBQyxLQUFJLENBQUMsUUFBUSxDQUFDLEVBQXRCLENBQXNCLEVBQUUsS0FBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxLQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUM5RixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCw0QkFBSyxHQUFMO1FBQ0UsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDO1FBQ2xCLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDakIsQ0FBQztJQWpETSx3QkFBVyxHQUFHLENBQUMsQ0FBQztJQUNoQiwrQkFBa0IsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNoQywyQkFBYyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDdkIsNkJBQWdCLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7SUErQ3ZDLG1CQUFDO0NBQUEsQUFuREQsSUFtREM7U0FuRFksWUFBWSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBlbnVtIEVycm9yVHlwZSB7XG4gIFJlc3RhcnQsXG4gIEF1dGgsXG4gIFJldHJ5YWJsZSxcbiAgRmF0YWxFcnJvclxufVxuZXhwb3J0IGNsYXNzIEVycm9ySGFuZGxlciB7XG4gIHN0YXRpYyBtYXhBdHRlbXB0cyA9IDg7XG4gIHN0YXRpYyBzaG91bGRSZXN0YXJ0Q29kZXMgPSBbNDA0LCA0MTBdO1xuICBzdGF0aWMgYXV0aEVycm9yQ29kZXMgPSBbNDAxXTtcbiAgc3RhdGljIHNob3VsZFJldHJ5Q29kZXMgPSBbNDIzLCA0MjldO1xuICBtaW4gPSA1MDA7XG4gIG1heCA9IHRoaXMubWluICogMTIwO1xuICBmYWN0b3IgPSAyO1xuICBhdHRlbXB0cyA9IDE7XG4gIHByaXZhdGUgZGVsYXk6IG51bWJlcjtcbiAgcHJpdmF0ZSBjb2RlPyA9IC0xO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuZGVsYXkgPSB0aGlzLm1pbjtcbiAgfVxuXG4gIGtpbmQoY29kZTogbnVtYmVyKTogRXJyb3JUeXBlIHtcbiAgICBpZiAoY29kZSA9PT0gdGhpcy5jb2RlKSB7XG4gICAgICB0aGlzLmF0dGVtcHRzKys7XG4gICAgICBpZiAodGhpcy5hdHRlbXB0cyA+IEVycm9ySGFuZGxlci5tYXhBdHRlbXB0cykge1xuICAgICAgICByZXR1cm4gRXJyb3JUeXBlLkZhdGFsRXJyb3I7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVzZXQoKTtcbiAgICB9XG4gICAgdGhpcy5jb2RlID0gY29kZTtcblxuICAgIGlmIChFcnJvckhhbmRsZXIuYXV0aEVycm9yQ29kZXMuaW5jbHVkZXMoY29kZSkpIHtcbiAgICAgIHJldHVybiBFcnJvclR5cGUuQXV0aDtcbiAgICB9XG4gICAgaWYgKEVycm9ySGFuZGxlci5zaG91bGRSZXN0YXJ0Q29kZXMuaW5jbHVkZXMoY29kZSkpIHtcbiAgICAgIHJldHVybiBFcnJvclR5cGUuUmVzdGFydDtcbiAgICB9XG4gICAgaWYgKGNvZGUgPCA0MDAgfHwgY29kZSA+PSA1MDAgfHwgRXJyb3JIYW5kbGVyLnNob3VsZFJldHJ5Q29kZXMuaW5jbHVkZXMoY29kZSkpIHtcbiAgICAgIHJldHVybiBFcnJvclR5cGUuUmV0cnlhYmxlO1xuICAgIH1cbiAgICByZXR1cm4gRXJyb3JUeXBlLkZhdGFsRXJyb3I7XG4gIH1cblxuICB3YWl0KCk6IFByb21pc2U8bnVtYmVyPiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgdGhpcy5kZWxheSA9IE1hdGgubWluKHRoaXMuZGVsYXkgKiB0aGlzLmZhY3RvciwgdGhpcy5tYXgpO1xuICAgICAgc2V0VGltZW91dCgoKSA9PiByZXNvbHZlKHRoaXMuYXR0ZW1wdHMpLCB0aGlzLmRlbGF5ICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdGhpcy5taW4pKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJlc2V0KCk6IHZvaWQge1xuICAgIHRoaXMuZGVsYXkgPSB0aGlzLm1pbjtcbiAgICB0aGlzLmF0dGVtcHRzID0gMTtcbiAgICB0aGlzLmNvZGUgPSAtMTtcbiAgfVxufVxuIl19