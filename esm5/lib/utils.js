// tslint:disable: no-bitwise
import * as tslib_1 from "tslib";
function safeMatch(base, re) {
    return (base.match(re) || [])[0] || '';
}
export function resolveUrl(url, base) {
    if (url.indexOf('https://') * url.indexOf('http://') === 0) {
        return url;
    }
    if (url.indexOf('//') === 0) {
        return safeMatch(base, /^(https?:)/) + url;
    }
    if (url.indexOf('/') === 0) {
        return safeMatch(base, /^(?:https?:)?(?:\/\/)?([^\/\?]+)/) + url;
    }
    return safeMatch(base, /^(?:https?:)?(?:\/\/)?([^\/\?]+)?(.*\/)/) + url;
}
export function unfunc(value, ref) {
    return value instanceof Function ? value(ref) : value;
}
export var noop = function () { };
export var pick = function (obj, whitelist) {
    var result = {};
    whitelist.forEach(function (key) { return (result[key] = obj[key]); });
    return result;
};
export function isNumber(x) {
    return x === Number(x);
}
export function isString(x) {
    return typeof x === 'string';
}
/**
 * 32-bit FNV-1a hash function
 */
export function createHash(str) {
    var hash = 2166136261;
    var len = str.length;
    for (var i = 0; i < len; i++) {
        hash ^= str.charCodeAt(i);
        hash += (hash << 1) + (hash << 4) + (hash << 7) + (hash << 8) + (hash << 24);
    }
    return hash >>> 0;
}
export var b64 = {
    encode: function (str) {
        return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, function (match, p1) {
            return String.fromCharCode(Number.parseInt(p1, 16));
        }));
    },
    decode: function (str) {
        return decodeURIComponent(atob(str)
            .split('')
            .map(function (c) { return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2); })
            .join(''));
    },
    serialize: function (obj) {
        return Object.entries(obj)
            .map(function (_a) {
            var _b = tslib_1.__read(_a, 2), key = _b[0], value = _b[1];
            return key + " " + b64.encode(String(value));
        })
            .toString();
    },
    parse: function (encoded) {
        var e_1, _a;
        var kvPairs = encoded.split(',').map(function (kv) { return kv.split(' '); });
        var decoded = Object.create(null);
        try {
            for (var kvPairs_1 = tslib_1.__values(kvPairs), kvPairs_1_1 = kvPairs_1.next(); !kvPairs_1_1.done; kvPairs_1_1 = kvPairs_1.next()) {
                var _b = tslib_1.__read(kvPairs_1_1.value, 2), key = _b[0], value = _b[1];
                decoded[key] = b64.decode(value);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (kvPairs_1_1 && !kvPairs_1_1.done && (_a = kvPairs_1.return)) _a.call(kvPairs_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return decoded;
    }
};
/**
 * Adaptive chunk size
 */
var DynamicChunk = /** @class */ (function () {
    function DynamicChunk() {
    }
    DynamicChunk.scale = function (throughput) {
        var elapsedTime = DynamicChunk.size / throughput;
        if (elapsedTime < DynamicChunk.minChunkTime) {
            DynamicChunk.size = Math.min(DynamicChunk.maxSize, DynamicChunk.size * 2);
        }
        if (elapsedTime > DynamicChunk.maxChunkTime) {
            DynamicChunk.size = Math.max(DynamicChunk.minSize, DynamicChunk.size / 2);
        }
        return DynamicChunk.size;
    };
    /** Maximum chunk size in bytes */
    DynamicChunk.maxSize = Number.MAX_SAFE_INTEGER;
    /** Minimum chunk size in bytes */
    DynamicChunk.minSize = 1024 * 256;
    /** Initial chunk size in bytes */
    DynamicChunk.size = 4096 * 256;
    DynamicChunk.minChunkTime = 2;
    DynamicChunk.maxChunkTime = 8;
    return DynamicChunk;
}());
export { DynamicChunk };
//# sourceMappingURL=data:application/json;base64,